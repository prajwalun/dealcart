version: '3.8'

services:
  # Vendor Mock 1 - Amazon
  vendor-mock-1:
    image: ${IMAGE_PREFIX}-vendor-mock:latest
    build:
      context: ../vendor-mock
      dockerfile: Dockerfile
    container_name: vendor-mock-1
    environment:
      - VENDOR_NAME=amz
      - PORT=9101
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep java | grep -v grep || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - dealcart

  # Vendor Mock 2 - BestBuy
  vendor-mock-2:
    image: ${IMAGE_PREFIX}-vendor-mock:latest
    build:
      context: ../vendor-mock
      dockerfile: Dockerfile
    container_name: vendor-mock-2
    environment:
      - VENDOR_NAME=bb
      - PORT=9102
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep java | grep -v grep || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - dealcart

  # Vendor Pricing Aggregator (with Vertical Autoscaling + Horizontal Scaling)
  vendor-pricing:
    image: ${IMAGE_PREFIX}-vendor-pricing:latest
    build:
      context: ../vendor-pricing
      dockerfile: Dockerfile
    # Remove container_name to allow multiple replicas
    environment:
      - PORT=9100
      - VENDORS=vendor-mock-1:9101:amz,vendor-mock-2:9102:bb
      # Vertical autoscaling configuration (per instance)
      - ADAPTIVE_MIN=8
      - ADAPTIVE_MAX=64
      - ADAPTIVE_STEP=8
      - TARGET_P95_MS=250
      - LOWER_P95_MS=200
      - LAT_WINDOW=2000
    restart: unless-stopped
    depends_on:
      vendor-mock-1:
        condition: service_healthy
      vendor-mock-2:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep java | grep -v grep || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - dealcart
    # Horizontal scaling: run 3 instances by default
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  # Checkout Service
  checkout:
    image: ${IMAGE_PREFIX}-checkout:latest
    build:
      context: ../checkout
      dockerfile: Dockerfile
    container_name: checkout
    environment:
      - PORT=9200
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep java | grep -v grep || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - dealcart

  # Edge Gateway (with Horizontal Scaling support)
  edge-gateway:
    image: ${IMAGE_PREFIX}-edge-gateway:latest
    build:
      context: ../edge-gateway
      dockerfile: Dockerfile
    # Remove container_name to allow multiple replicas
    environment:
      - PORT=8080
      - PRICING_HOST=vendor-pricing
      - PRICING_PORT=9100
      - CHECKOUT_HOST=checkout
      - CHECKOUT_PORT=9200
      - RATE_LIMIT_QPS=500
      - GRPC_DEADLINE_SECONDS=2
      - LOG_LEVEL=INFO
    restart: unless-stopped
    depends_on:
      vendor-pricing:
        condition: service_healthy
      checkout:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep java | grep -v grep || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    networks:
      - dealcart
    # Horizontal scaling: run 2 instances by default
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # Next.js Web UI
  web-ui:
    image: ${IMAGE_PREFIX}-web-ui:latest
    build:
      context: ../web-ui
      dockerfile: Dockerfile
    container_name: web-ui
    environment:
      - NEXT_PUBLIC_API_BASE_URL=
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep node | grep -v grep || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    networks:
      - dealcart

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    depends_on:
      edge-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/caddy-health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - dealcart

networks:
  dealcart:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:

